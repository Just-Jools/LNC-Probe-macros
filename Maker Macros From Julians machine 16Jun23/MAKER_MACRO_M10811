;XYZ单个平面测量 Single Plane Measurement


WAIT[0,0];


//I think this is asking for the tool number. See page 201and 202 of the 'LNC Macro Documentation' PDF on git hub//
#190 = R_SYS_INFO[0,1]; 
IF [#190 != 0];
  GOTO 999;				"not execute program, Return to main program"
END_IF;

//call macro M10724 which is just speed settings//
M10724;




//I can't find out what variables 19 and 20 are//
IF [#19 != #0 && #20 != #0];
  ALARM["S_ T_Can not be entered at the same time"];		//this translated alarm is still strange, maybe it means the inputs can't be the same?? So its either one or the other//
END_IF;

IF [#19 != #0 && #8 != #0];
  ALARM["S_ H_Can not be entered at the same time"];		//this translated alarm is still strange, maybe it means the inputs can't be the same??//
END_IF;

IF [#20 != #0 && #13 != #0];
  ALARM["T_ M_Can not be entered at the same time"];		//this translated alarm is still strange, maybe it means the inputs can't be the same??//
END_IF;


//I can't find where #1 get's it's value from//
FOR #1 = 135 TO 149;
  @[#1] = #0;
END_FOR;



//set variable #10 as the X coordinates//
#10 = R_ABS_COOR[0,1];			Record the current X axis coordinates

//Set Variable #12 as the y coordinates//
#12 = R_ABS_COOR[0,2];			Record the current Y Axis Coordinates.


//This is doing a protected move 
G31P2 X[#10-@[@111+2]] Y[#12-@[@111+3]] F@119;
WAIT[0,0];



// the below is to do with the skip signal using either the absolute coordinates or the machine coordinates. Page 204 "LNC Macro Documentation' PDF
#50 = R_SKIP[0,1];			G31P2   Signal Trigger
#51 = R_SKIP[0,101];			G31P2  	Trigger X Abs Coordinates
#52 = R_SKIP[0,102];			G31P2 	Trigger Y Abs Coordinates
#53 = R_SKIP[0,102];			G31P2 	Trigger Z Abs Coordinates 	Why is this value the same as the one above??


//This means Read Absolute Coordinates X Y and Y and assign them to the variables. See page 209 of the LNC Macro Documentation' PDF//
//Could there be a mistake here and this meant to be XY and Z??//
#54 = R_ABS_COOR[0,1];			Record the current X-Axis Coordinates
#55 = R_ABS_COOR[0,2];			Record the Current y-Axis Coordinates
#56 = R_ABS_COOR[0,2];			Record the current Z-Axis Coordinates


//ABS means read Absolute vale. Page 195 'LNC Macro Documentation' PDF//
#60 = ABS[#51-[#10-@[@111+2]]];
#61 = ABS[#52-[#12-@[@111+3]]];
#62 = ABS[#54-[#10-@[@111+2]]];
#63 = ABS[#55-[#12-@[@111+3]]];






IF [#50 == 1];
  IF [#60 >= @123 || #61 >= @123];
    #70 = 22;
    CALL_SUB "ALARM";
  END_IF;
ELSE;
  IF [#62 >= @123 || #63 >= @123];
    #70 = 22;
    CALL_SUB "ALARM";
  END_IF;
END_IF;

#30 = -1;					DIR*FLAG
IF [#24 != #0];
  GOTO 5;
END_IF;
IF [#25 != #0];
  GOTO 7;
END_IF;







//the below seems to be for the Z move//
;Z-MOVE
IF [#26 == #0];
  #70 = 225;
  CALL_SUB "ALARM";
END_IF;

;#4=5203			//in the haas macros then the skip signal is stored in 5061 to 5066. I'm thinking that 5021 is the z skip signal storage variable //
IF [#56 >= #26];
  #30 = 1;
END_IF;

M10726 Z#26 Q#17;  //looking at the post processor I think Q is over travel//
IF [@149 != 0];
  IF [@149 != 2];
    #70 = 22;
  ELSE;
    #70 = 21;
  END_IF;
  CALL_SUB "ALARM";
END_IF;
WAIT[0,0];
@135 = #10;
@136 = #12;
@137 = @126;					Z*POS
@138 = @137;

IF [#5 != #0];
  @138 = @138+R_TOOL_DATA[0,#5,103];		LWEARSIZE
END_IF;

@142 = @137-#26;
@143 = @138-#26;				SIZEERROR
@145 = ABS[@142];				T P ERR
@146 = @143*#30;				METAL CON
GOTO 9;






//This seems to be for X moves//
N5;						X*MOVE
IF [#25 != #0 || #26 != #0];
  #70 = 225;
  CALL_SUB "ALARM";
END_IF;

#11 = @[@111];
;#4=5201				//yes this correlates that 5201 is where the x skip signal is stored//
#54 = R_ABS_COOR[0,1];			记录当前X轴坐标
IF [#54 >= #24];
  #11 = -@[@111];
  #30 = 1;
END_IF;

M10726 X#24 Q#17 S@[@111];
IF [@149 != 0];
  IF [@149 != 2];
    #70 = 22;
  ELSE;
    #70 = 21;
  END_IF;
  CALL_SUB "ALARM";
END_IF;
@135 = @124+#11+@[@111+2];	COR*SKIP*POS
@136 = #12;
@138 = @135;
IF [#5 != #0];
  @138 = @138+R_TOOL_DATA[0,#5,103]];	ACT*SIZE
END_IF;
@140 = @135-#24;			X*ERROR
@143 = @138-#24;			SIZE*ERROR
@145 = ABS[@140];			T*P*ERROR
@146 = @143*#30;			METAL*CON
GOTO 9;





// This seems to be for Y moves//
N7;//(Y*MOVE)
IF [#26 != #0];
  #70 = 225;
  CALL_SUB "ALARM";
END_IF;
#11 = @[@111+1];

;//#4=5202
#55 = R_ABS_COOR[0,2];			记录当前Y轴坐标
IF [#55 >= #25];
  #11 = -@[@111+1];
  #30 = 1;
END_IF;

M10726 Y#25 Q#17 S@[@111+1];
IF [@149 != 0];
  IF [@149 != 2];
    #70 = 22;
  ELSE;
    #70 = 21;
  END_IF;
  CALL_SUB "ALARM";
END_IF;
@135 = #10;
@136 = @125+#11+@[@111+3];                 //(Y*SKIP*POS)
@138 = @136;
IF [#5 != #0];
  @138 =@138+R_TOOL_DATA[0,#5,103]];	ACT*SIZE
END_IF;

@141 = @136-#25;	(ERROR)
@143 = @138-#25;	(SIZE*ERROR)
@145 = ABS[@141];	(TP*ERROR)
@146 = @143*#30;	(METAL*CON)







// I think this is for another type of move or macro due to it being called N9//
//or maybe it closes out all the move macros from XY and Z above. Just they all use this code//
N9;
@147 = #30;
IF [#23 != #0];
  M10730 H#8 M#13 S#19 T#20 W#23 X#24 Y#25 Z#26;
END_IF;

IF [#21 != #0];
  IF [ABS[@143] > #21 || @145 >= #21];
    #70 = 23;
    CALL_SUB "ALARM";
    GOTO 999;
  END_IF;
END_IF;

IF [#8 != #0];
  IF [ABS[@143] >= #8];
    @148 = 1;
  END_IF;
  IF [[@120&&4] != 4 && ABS[@143] >= #11];
    G00 X#10 Y#12;
    WAIT[0,0];
    ALARM["刀号设定超出范围"];
  END_IF;
END_IF;

IF [#13 != #0];
  IF [ABS[@145] >= [#13/2]];
    @148 = 2;
  END_IF;
  IF [[@120&&4] != 4 && ABS[@145] >= [#13/2]];
    G00 X#10 Y#12;
    WAIT[0,0];
    ALARM["超出位置"];
  END_IF;
END_IF;

IF [#20 != #0];
  IF [ABS[@146] >= #22];
    IF [#6 == #0];
      #6 = 1;
    END_IF;
    M10732 T#20 C[@146*#6] Z#26;
  END_IF;
END_IF;

IF [#19 != #0];
  M10732 S#19 Z#26 W1.0;
END_IF;

G00 X#10 Y#12;
N999;
WAIT[0,0];
M99;






SUB "ALARM";
  G00 X#10 Y#12;
  SELECT [#70];
    CASE 21:
      WAIT[0,0];
      ALARM["探测失败"];
    CASE 22:
      WAIT[0,0];
      ALARM["探测打开"];
    CASE 23:
      @148 = 3;
      IF [[@120&&4] == 4];
        EXIT_SUB;
      END_IF;
      WAIT[0,0];
      ALARM["UPPER*TOL*EXCEEDED"];
    CASE 225:
      WAIT[0,0];
      ALARM["XYZ禁止混合输入"];
  END_SELECT;
END_SUB;

